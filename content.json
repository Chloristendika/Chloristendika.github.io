{"pages":[],"posts":[{"title":"About this blog","text":"关于这个博客自从文化课成绩掉了之后就很少再碰电脑啦 可以看一下这篇Blog的写作时间就知道我在熬夜（/(ㄒoㄒ)/~~） 先前搭建hexo blog出了好多好多问题 但这次十分得顺利~ 这个Blog 主要记录我学习 python 和 日语 的点滴， 及 steam… 且尤zyz赞助 会写一点新番推荐","link":"/2019/08/06/About-this-blog/"},{"title":"Python中的函数","text":"Python 中的函数python 中的函数用关键字 ‘def’ 来定义，如下是一个求阶乘的函数 12345def fac(num): ans = 1 for i in range(2, num + 1): ans *= i return ans python 中 函数可以有默认参数，当不传入参数时 会自动引用默认定义的参数 123456def add(a = 0, b = 0, c = 0): return a + b + cprint(add()) #输出0print(add(1)) #输出1print(add(1, 2, 3)) #输出6 可变参数当传入未知数量的参数时，可以使用可变参数 12345678def add(*args): tot = 0 for i in args: tot += i return totprint(add(1, 2, 3)) #输出 6print(add(1, 2, 3, 4, 5)) # 输出 15 同名函数的覆盖问题如下定义中，第二个Say函数会覆盖第一个Say函数 12345678910def Say(): print(\"Hello World!\\n\")def Say(): print(\"Goodbye World!\\n\")Say()# 输出 Goodbye World! 在实际多人开发过程中，当两个人写的文件里都有 同样一个名字的函数时，可以用 模块 调用 每个文件就是一个模块 12345# module1.pydef Say(): print(\"Hello World!\\n\") 12345# module2.pydef Say(): print(\"Goodbye World!\\n\") 12345from module1 import SaySay() # Hello Worldfrom module2 import SaySay() # Goodbye World 注意模块也会出现覆盖问题 123from module1 import Sayfrom module2 import SaySay() # Goodbye World 可以用如下方式进行 1234import module1 as m1import module2 as m2m1.Say()m2.Say() 当程序在导入一个模块时，如果这个模块里有可执行程序 就会自动执行，为了避免这个情况，可以在程序里的执行程序中加入 1234567891011def Say(): passdef asdf(): pass# __name__是Python中一个隐含的变量它代表了模块的名字# 只有被Python解释器直接执行的模块的名字才是__main__if __name__ == '__main__': print(\"这个函数被解释器调用了\")","link":"/2019/08/06/Python中的函数/"},{"title":"Python 中的字符串","text":"Python 中的字符串下面的字符串操作来源 https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748def main(): str1 = 'hello, world!' # 通过len函数计算字符串的长度 print(len(str1)) # 13 # 获得字符串首字母大写的拷贝 print(str1.capitalize()) # Hello, world! # 获得字符串变大写后的拷贝 print(str1.upper()) # HELLO, WORLD! # 从字符串中查找子串所在位置 print(str1.find('or')) # 8 print(str1.find('shit')) # -1 # 与find类似但找不到子串时会引发异常 # print(str1.index('or')) # print(str1.index('shit')) # 检查字符串是否以指定的字符串开头 print(str1.startswith('He')) # False print(str1.startswith('hel')) # True # 检查字符串是否以指定的字符串结尾 print(str1.endswith('!')) # True # 将字符串以指定的宽度居中并在两侧填充指定的字符 print(str1.center(50, '*')) # 将字符串以指定的宽度靠右放置左侧填充指定的字符 print(str1.rjust(50, ' ')) str2 = 'abc123456' # 从字符串中取出指定位置的字符(下标运算) print(str2[2]) # c # 字符串切片(从指定的开始索引到指定的结束索引) print(str2[2:5]) # c12 print(str2[2:]) # c123456 print(str2[2::2]) # c246 print(str2[::2]) # ac246 print(str2[::-1]) # 654321cba print(str2[-3:-1]) # 45 # 检查字符串是否由数字构成 print(str2.isdigit()) # False # 检查字符串是否以字母构成 print(str2.isalpha()) # False # 检查字符串是否以数字和字母构成 print(str2.isalnum()) # True str3 = ' jackfrued@126.com ' print(str3) # 获得字符串修剪左右两侧空格的拷贝 print(str3.strip())if __name__ == '__main__': main()","link":"/2019/08/08/Python-中的字符串/"},{"title":"银河补习班 观后感","text":"这周去看了《银河补习班》 前言感觉去了一个比较荒凉的电影院 开始前5分钟进场，艾玛，怎么一个人都没有，里面黑漆漆的，enn… 放好爆米花就出来转 5分钟后，仍然只有我一个人，怪恐怖的，主要是旁边放的是恐怖电影，尖叫声传来不断 包场了，包场了… （第一次去只有一个人的影院..） 放电影过程中外面们还不断地开，关，开，关… 正片","link":"/2019/08/06/银河补习班-观后感/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/08/06/hello-world/"}],"tags":[{"name":"杂记","slug":"杂记","link":"/tags/杂记/"},{"name":"编程","slug":"编程","link":"/tags/编程/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","link":"/tags/学习笔记/"},{"name":"函数","slug":"函数","link":"/tags/函数/"},{"name":"字符串","slug":"字符串","link":"/tags/字符串/"},{"name":"观后感","slug":"观后感","link":"/tags/观后感/"},{"name":"电影","slug":"电影","link":"/tags/电影/"}],"categories":[]}